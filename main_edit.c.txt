/******************************************************************************/
/* Files to Include                                                           */
/******************************************************************************/

#if defined(__XC)
    #include <xc.h>        /* XC8 General Include File */
#elif defined(HI_TECH_C)
    #include <htc.h>       /* HiTech General Include File */
#elif defined(__18CXX)
    #include <p18cxxx.h>   /* C18 General Include File */
#endif

#if defined(__XC) || defined(HI_TECH_C)

#include <stdint.h>        /* For uint8_t definition */
#include <stdbool.h>       /* For true/false definition */

#endif


#include "system.h"        /* System funct/params, like osc/peripheral config */
#include "user.h"          /* User funct/params, such as InitApp */

#include "adcc.h"
#include "pwm2_16bit.h"
/******************************************************************************/
/* User Global Variable Declaration                                           */
/******************************************************************************/
/* i.e. uint8_t <variable_name>; */
static uint8_t Imax = 100;
double e_total = 0;

/******************************************************************************/
/* Main Program                                                               */
/******************************************************************************/

void main(void)
{
    /* Configure the oscillator for the device */
    ConfigureOscillator();
    //TMR0_Initialize();
    
    /* Initialize I/O and Peripherals for application */
    InitApp();
    

    adc_result_t Voltage_In = 0;
    int16_t Iread = 0;
    long double Isq = 0;
    bool Ineg = FALSE;
    long double Iact;
    long double Ims;
    uint16_t count = 0;
    uint16_t PWM_val = 0x77;
    
    /* TODO <INSERT USER APPLICATION CODE HERE> */
    //TMR0_StartTimer();
    
    /* PWM1 initiation
       Set PWM duty cycle to 50% 
     */
    PWM2_Setup();
    
    PWM2_16BIT_Initialize();
    PWM2_16BIT_Enable();
    PWM2_16BIT_SetSlice1Output1DutyCycleRegister(PWM_val);
        
    
    while(1)
    {
        
        /* Measure Voltage using ANB4 channel*/
        InitADB4();
        if(ADCC_IsConversionDone())
            Voltage_In = ADCC_GetConversionResult();
        ADCC_StopConversion();
        
        
        /* Check If Voltage_In is > MAXVOLT or < MINVOLT */
        if(Voltage_In > MAXVOLT || Voltage_In < MINVOLT )
        {
            /* Reset system */
            PWM2_16BIT_Disable();
            return 0;
        }
        
        
        /* Measure Actual Current using ANF5 channel */
        InitADF5();
        if(ADCC_IsConversionDone())
            Iread = ADCC_GetConversionResult();
        ADCC_StopConversion();
        count++;
        
        
        /* Calculate the actual current value from ADC conversion */
        Iact = (long double)(((long double)Iread >> 12) * Imax);
        Isq += (Iact*Iact);
        
        /* If current reading sign changes
            toggle sign flag (-)ve or (+)ve 
            Calculate Irms
            Estimate Error
            Perform PI control algorithm */ 
        
        if((Iread >> 12)  &&  Ineg == FALSE)
        {
            Ineg = TRUE;
            Ims = mean_sq(Isq, count);
            
            PWM_val *= measure_PI(Ims); //PWM(t) = PWM(t-1)*(P*e(t)+I*int(e(t))+D*d(e(t))/dt)
            count = 0; Isq = 0;
            
            PWM2_16BIT_SetSlice1Output1DutyCycleRegister(PWM_val);
        }
        else if((Iread >> 12) == 0  &&  Ineg == TRUE)
        {
            Ineg = FALSE;
            Ims = mean_sq(Isq, count);
            
            PWM_val *= measure_PI(Ims); //PWM(t) = PWM(t-1)*(P*e(t)+I*int(e(t))+D*d(e(t))/dt)
            count = 0; Isq = 0;
            
            PWM2_16BIT_SetSlice1Output1DutyCycleRegister(PWM_val);
        }
        
        
        
    }

}

